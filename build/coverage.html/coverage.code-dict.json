{"/home/travis/build/npmtest/node-npmtest-store2/test.js":"/* istanbul instrument in package npmtest_store2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-store2/lib.npmtest_store2.js":"/* istanbul instrument in package npmtest_store2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_store2 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_store2 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-store2/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-store2 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_store2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_store2\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_store2.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_store2.rollup.js'] =\n            local.assetsDict['/assets.npmtest_store2.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_store2.__dirname + '/lib.npmtest_store2.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-store2/node_modules/store2/dist/store2.js":"/*! store2 - v2.5.1 - 2017-03-28\n* Copyright (c) 2017 Nathan Bubna; Licensed ,  */\n;(function(window, define) {\n    var _ = {\n        version: \"2.5.1\",\n        areas: {},\n        apis: {},\n\n        // utilities\n        inherit: function(api, o) {\n            for (var p in api) {\n                if (!o.hasOwnProperty(p)) {\n                    o[p] = api[p];\n                }\n            }\n            return o;\n        },\n        stringify: function(d) {\n            return d === undefined || typeof d === \"function\" ? d+'' : JSON.stringify(d);\n        },\n        parse: function(s) {\n            // if it doesn't parse, return as is\n            try{ return JSON.parse(s); }catch(e){ return s; }\n        },\n\n        // extension hooks\n        fn: function(name, fn) {\n            _.storeAPI[name] = fn;\n            for (var api in _.apis) {\n                _.apis[api][name] = fn;\n            }\n        },\n        get: function(area, key){ return area.getItem(key); },\n        set: function(area, key, string){ area.setItem(key, string); },\n        remove: function(area, key){ area.removeItem(key); },\n        key: function(area, i){ return area.key(i); },\n        length: function(area){ return area.length; },\n        clear: function(area){ area.clear(); },\n\n        // core functions\n        Store: function(id, area, namespace) {\n            var store = _.inherit(_.storeAPI, function(key, data, overwrite) {\n                if (arguments.length === 0){ return store.getAll(); }\n                if (typeof data === \"function\"){ return store.transact(key, data, overwrite); }// fn=data, alt=overwrite\n                if (data !== undefined){ return store.set(key, data, overwrite); }\n                if (typeof key === \"string\" || typeof key === \"number\"){ return store.get(key); }\n                if (!key){ return store.clear(); }\n                return store.setAll(key, data);// overwrite=data, data=key\n            });\n            store._id = id;\n            try {\n                var testKey = '_safariPrivate_';\n                area.setItem(testKey, 'sucks');\n                store._area = area;\n                area.removeItem(testKey);\n            } catch (e) {}\n            if (!store._area) {\n                store._area = _.inherit(_.storageAPI, { items: {}, name: 'fake' });\n            }\n            store._ns = namespace || '';\n            if (!_.areas[id]) {\n                _.areas[id] = store._area;\n            }\n            if (!_.apis[store._ns+store._id]) {\n                _.apis[store._ns+store._id] = store;\n            }\n            return store;\n        },\n        storeAPI: {\n            // admin functions\n            area: function(id, area) {\n                var store = this[id];\n                if (!store || !store.area) {\n                    store = _.Store(id, area, this._ns);//new area-specific api in this namespace\n                    if (!this[id]){ this[id] = store; }\n                }\n                return store;\n            },\n            namespace: function(namespace, noSession) {\n                if (!namespace){\n                    return this._ns ? this._ns.substring(0,this._ns.length-1) : '';\n                }\n                var ns = namespace, store = this[ns];\n                if (!store || !store.namespace) {\n                    store = _.Store(this._id, this._area, this._ns+ns+'.');//new namespaced api\n                    if (!this[ns]){ this[ns] = store; }\n                    if (!noSession){ store.area('session', _.areas.session); }\n                }\n                return store;\n            },\n            isFake: function(){ return this._area.name === 'fake'; },\n            toString: function() {\n                return 'store'+(this._ns?'.'+this.namespace():'')+'['+this._id+']';\n            },\n\n            // storage functions\n            has: function(key) {\n                if (this._area.has) {\n                    return this._area.has(this._in(key));//extension hook\n                }\n                return !!(this._in(key) in this._area);\n            },\n            size: function(){ return this.keys().length; },\n            each: function(fn, and) {\n                for (var i=0, m=_.length(this._area); i<m; i++) {\n                    var key = this._out(_.key(this._area, i));\n                    if (key !== undefined) {\n                        if (fn.call(this, key, and || this.get(key)) === false) {\n                            break;\n                        }\n                    }\n                    if (m > _.length(this._area)) { m--; i--; }// in case of removeItem\n                }\n                return and || this;\n            },\n            keys: function() {\n                return this.each(function(k, list){ list.push(k); }, []);\n            },\n            get: function(key, alt) {\n                var s = _.get(this._area, this._in(key));\n                return s !== null ? _.parse(s) : alt || s;// support alt for easy default mgmt\n            },\n            getAll: function() {\n                return this.each(function(k, all){ all[k] = this.get(k); }, {});\n            },\n            transact: function(key, fn, alt) {\n                var val = this.get(key, alt),\n                    ret = fn(val);\n                this.set(key, ret === undefined ? val : ret);\n                return this;\n            },\n            set: function(key, data, overwrite) {\n                var d = this.get(key);\n                if (d != null && overwrite === false) {\n                    return data;\n                }\n                return _.set(this._area, this._in(key), _.stringify(data), overwrite) || d;\n            },\n            setAll: function(data, overwrite) {\n                var changed, val;\n                for (var key in data) {\n                    val = data[key];\n                    if (this.set(key, val, overwrite) !== val) {\n                        changed = true;\n                    }\n                }\n                return changed;\n            },\n            remove: function(key) {\n                var d = this.get(key);\n                _.remove(this._area, this._in(key));\n                return d;\n            },\n            clear: function() {\n                if (!this._ns) {\n                    _.clear(this._area);\n                } else {\n                    this.each(function(k){ _.remove(this._area, this._in(k)); }, 1);\n                }\n                return this;\n            },\n            clearAll: function() {\n                var area = this._area;\n                for (var id in _.areas) {\n                    if (_.areas.hasOwnProperty(id)) {\n                        this._area = _.areas[id];\n                        this.clear();\n                    }\n                }\n                this._area = area;\n                return this;\n            },\n\n            // internal use functions\n            _in: function(k) {\n                if (typeof k !== \"string\"){ k = _.stringify(k); }\n                return this._ns ? this._ns + k : k;\n            },\n            _out: function(k) {\n                return this._ns ?\n                    k && k.indexOf(this._ns) === 0 ?\n                        k.substring(this._ns.length) :\n                        undefined : // so each() knows to skip it\n                    k;\n            }\n        },// end _.storeAPI\n        storageAPI: {\n            length: 0,\n            has: function(k){ return this.items.hasOwnProperty(k); },\n            key: function(i) {\n                var c = 0;\n                for (var k in this.items){\n                    if (this.has(k) && i === c++) {\n                        return k;\n                    }\n                }\n            },\n            setItem: function(k, v) {\n                if (!this.has(k)) {\n                    this.length++;\n                }\n                this.items[k] = v;\n            },\n            removeItem: function(k) {\n                if (this.has(k)) {\n                    delete this.items[k];\n                    this.length--;\n                }\n            },\n            getItem: function(k){ return this.has(k) ? this.items[k] : null; },\n            clear: function(){ for (var k in this.list){ this.removeItem(k); } },\n            toString: function(){ return this.length+' items in '+this.name+'Storage'; }\n        }// end _.storageAPI\n    };\n\n    var store =\n        // safely set this up (throws error in IE10/32bit mode for local files)\n        _.Store(\"local\", (function(){try{ return localStorage; }catch(e){}})());\n    store.local = store;// for completeness\n    store._ = _;// for extenders and debuggers...\n    // safely setup store.session (throws exception in FF for file:/// urls)\n    store.area(\"session\", (function(){try{ return sessionStorage; }catch(e){}})());\n\n    if (typeof define === 'function' && define.amd !== undefined) {\n        define('store2', [], function () {\n            return store;\n        });\n    } else if (typeof module !== 'undefined' && module.exports) {\n        module.exports = store;\n    } else {\n        // expose the primary store fn to the global object and save conflicts\n        if (window.store){ _.conflict = window.store; }\n        window.store = store;\n    }\n\n})(this, this.define);\n","/home/travis/build/npmtest/node-npmtest-store2/node_modules/store2/src/store2.js":"/**\n * Copyright (c) 2013, ESHA Research\n * Dual licensed under the MIT and GPL licenses:\n *   http://www.opensource.org/licenses/mit-license.php\n *   http://www.gnu.org/licenses/gpl.html\n */\n;(function(window, define) {\n    var _ = {\n        version: \"<%= pkg.version %>\",\n        areas: {},\n        apis: {},\n\n        // utilities\n        inherit: function(api, o) {\n            for (var p in api) {\n                if (!o.hasOwnProperty(p)) {\n                    o[p] = api[p];\n                }\n            }\n            return o;\n        },\n        stringify: function(d) {\n            return d === undefined || typeof d === \"function\" ? d+'' : JSON.stringify(d);\n        },\n        parse: function(s) {\n            // if it doesn't parse, return as is\n            try{ return JSON.parse(s); }catch(e){ return s; }\n        },\n\n        // extension hooks\n        fn: function(name, fn) {\n            _.storeAPI[name] = fn;\n            for (var api in _.apis) {\n                _.apis[api][name] = fn;\n            }\n        },\n        get: function(area, key){ return area.getItem(key); },\n        set: function(area, key, string){ area.setItem(key, string); },\n        remove: function(area, key){ area.removeItem(key); },\n        key: function(area, i){ return area.key(i); },\n        length: function(area){ return area.length; },\n        clear: function(area){ area.clear(); },\n\n        // core functions\n        Store: function(id, area, namespace) {\n            var store = _.inherit(_.storeAPI, function(key, data, overwrite) {\n                if (arguments.length === 0){ return store.getAll(); }\n                if (typeof data === \"function\"){ return store.transact(key, data, overwrite); }// fn=data, alt=overwrite\n                if (data !== undefined){ return store.set(key, data, overwrite); }\n                if (typeof key === \"string\" || typeof key === \"number\"){ return store.get(key); }\n                if (!key){ return store.clear(); }\n                return store.setAll(key, data);// overwrite=data, data=key\n            });\n            store._id = id;\n            try {\n                var testKey = '_safariPrivate_';\n                area.setItem(testKey, 'sucks');\n                store._area = area;\n                area.removeItem(testKey);\n            } catch (e) {}\n            if (!store._area) {\n                store._area = _.inherit(_.storageAPI, { items: {}, name: 'fake' });\n            }\n            store._ns = namespace || '';\n            if (!_.areas[id]) {\n                _.areas[id] = store._area;\n            }\n            if (!_.apis[store._ns+store._id]) {\n                _.apis[store._ns+store._id] = store;\n            }\n            return store;\n        },\n        storeAPI: {\n            // admin functions\n            area: function(id, area) {\n                var store = this[id];\n                if (!store || !store.area) {\n                    store = _.Store(id, area, this._ns);//new area-specific api in this namespace\n                    if (!this[id]){ this[id] = store; }\n                }\n                return store;\n            },\n            namespace: function(namespace, noSession) {\n                if (!namespace){\n                    return this._ns ? this._ns.substring(0,this._ns.length-1) : '';\n                }\n                var ns = namespace, store = this[ns];\n                if (!store || !store.namespace) {\n                    store = _.Store(this._id, this._area, this._ns+ns+'.');//new namespaced api\n                    if (!this[ns]){ this[ns] = store; }\n                    if (!noSession){ store.area('session', _.areas.session); }\n                }\n                return store;\n            },\n            isFake: function(){ return this._area.name === 'fake'; },\n            toString: function() {\n                return 'store'+(this._ns?'.'+this.namespace():'')+'['+this._id+']';\n            },\n\n            // storage functions\n            has: function(key) {\n                if (this._area.has) {\n                    return this._area.has(this._in(key));//extension hook\n                }\n                return !!(this._in(key) in this._area);\n            },\n            size: function(){ return this.keys().length; },\n            each: function(fn, and) {\n                for (var i=0, m=_.length(this._area); i<m; i++) {\n                    var key = this._out(_.key(this._area, i));\n                    if (key !== undefined) {\n                        if (fn.call(this, key, and || this.get(key)) === false) {\n                            break;\n                        }\n                    }\n                    if (m > _.length(this._area)) { m--; i--; }// in case of removeItem\n                }\n                return and || this;\n            },\n            keys: function() {\n                return this.each(function(k, list){ list.push(k); }, []);\n            },\n            get: function(key, alt) {\n                var s = _.get(this._area, this._in(key));\n                return s !== null ? _.parse(s) : alt || s;// support alt for easy default mgmt\n            },\n            getAll: function() {\n                return this.each(function(k, all){ all[k] = this.get(k); }, {});\n            },\n            transact: function(key, fn, alt) {\n                var val = this.get(key, alt),\n                    ret = fn(val);\n                this.set(key, ret === undefined ? val : ret);\n                return this;\n            },\n            set: function(key, data, overwrite) {\n                var d = this.get(key);\n                if (d != null && overwrite === false) {\n                    return data;\n                }\n                return _.set(this._area, this._in(key), _.stringify(data), overwrite) || d;\n            },\n            setAll: function(data, overwrite) {\n                var changed, val;\n                for (var key in data) {\n                    val = data[key];\n                    if (this.set(key, val, overwrite) !== val) {\n                        changed = true;\n                    }\n                }\n                return changed;\n            },\n            remove: function(key) {\n                var d = this.get(key);\n                _.remove(this._area, this._in(key));\n                return d;\n            },\n            clear: function() {\n                if (!this._ns) {\n                    _.clear(this._area);\n                } else {\n                    this.each(function(k){ _.remove(this._area, this._in(k)); }, 1);\n                }\n                return this;\n            },\n            clearAll: function() {\n                var area = this._area;\n                for (var id in _.areas) {\n                    if (_.areas.hasOwnProperty(id)) {\n                        this._area = _.areas[id];\n                        this.clear();\n                    }\n                }\n                this._area = area;\n                return this;\n            },\n\n            // internal use functions\n            _in: function(k) {\n                if (typeof k !== \"string\"){ k = _.stringify(k); }\n                return this._ns ? this._ns + k : k;\n            },\n            _out: function(k) {\n                return this._ns ?\n                    k && k.indexOf(this._ns) === 0 ?\n                        k.substring(this._ns.length) :\n                        undefined : // so each() knows to skip it\n                    k;\n            }\n        },// end _.storeAPI\n        storageAPI: {\n            length: 0,\n            has: function(k){ return this.items.hasOwnProperty(k); },\n            key: function(i) {\n                var c = 0;\n                for (var k in this.items){\n                    if (this.has(k) && i === c++) {\n                        return k;\n                    }\n                }\n            },\n            setItem: function(k, v) {\n                if (!this.has(k)) {\n                    this.length++;\n                }\n                this.items[k] = v;\n            },\n            removeItem: function(k) {\n                if (this.has(k)) {\n                    delete this.items[k];\n                    this.length--;\n                }\n            },\n            getItem: function(k){ return this.has(k) ? this.items[k] : null; },\n            clear: function(){ for (var k in this.list){ this.removeItem(k); } },\n            toString: function(){ return this.length+' items in '+this.name+'Storage'; }\n        }// end _.storageAPI\n    };\n\n    var store =\n        // safely set this up (throws error in IE10/32bit mode for local files)\n        _.Store(\"local\", (function(){try{ return localStorage; }catch(e){}})());\n    store.local = store;// for completeness\n    store._ = _;// for extenders and debuggers...\n    // safely setup store.session (throws exception in FF for file:/// urls)\n    store.area(\"session\", (function(){try{ return sessionStorage; }catch(e){}})());\n\n    if (typeof define === 'function' && define.amd !== undefined) {\n        define('store2', [], function () {\n            return store;\n        });\n    } else if (typeof module !== 'undefined' && module.exports) {\n        module.exports = store;\n    } else {\n        // expose the primary store fn to the global object and save conflicts\n        if (window.store){ _.conflict = window.store; }\n        window.store = store;\n    }\n\n})(this, this.define);\n","/home/travis/build/npmtest/node-npmtest-store2/node_modules/store2/src/store.array.js":"/**\n * Copyright (c) 2017 ESHA Research\n * Dual licensed under the MIT and GPL licenses:\n *   http://www.opensource.org/licenses/mit-license.php\n *   http://www.gnu.org/licenses/gpl.html\n *\n * Adds shortcut for safely applying all available Array functions to stored values. If there is no\n * value, the functions will act as if upon an empty one. If there is a non, array value, it is put\n * into an array before the function is applied. If the function results in an empty array, the\n * key/value is removed from the storage, otherwise the array is restored.\n *\n *   store.push('array', 'a', 1, true);// == store.set('array', (store.get('array')||[]).push('a', 1, true]));\n *   store.indexOf('array', true);// === store.get('array').indexOf(true)\n * \n * This will add all functions of Array.prototype that are specific to the Array interface and have no\n * conflict with existing store functions.\n *\n * Status: BETA - useful, but adds more functions than reasonable\n */\n;(function(_, Array) {\n\n    // expose internals on the underscore to allow extensibility\n    _.array = function(fnName, key, args) {\n        var value = this.get(key, []),\n            array = Array.isArray(value) ? value : [value],\n            ret = array[fnName].apply(array, args);\n        if (array.length > 0) {\n            this.set(key, array.length > 1 ? array : array[0]);\n        } else {\n            this.remove(key);\n        }\n        return ret;\n    };\n    _.arrayFn = function(fnName) {\n        return function(key) {\n            return this.array(fnName, key,\n                arguments.length > 1 ? Array.prototype.slice.call(arguments, 1) : null);\n        };\n    };\n\n    // add function(s) to the store interface\n    _.fn('array', _.array);\n    Object.getOwnPropertyNames(Array.prototype).forEach(function(name) {\n        // add Array interface functions w/o existing conflicts\n        if (typeof Array.prototype[name] === \"function\") {\n            if (!(name in _.storeAPI)) {\n                _.fn(name, _.array[name] = _.arrayFn(name));\n            }\n        }\n    });\n\n})(window.store._, window.Array);\n","/home/travis/build/npmtest/node-npmtest-store2/node_modules/store2/src/store.bind.js":"/**\n * Copyright (c) 2013 ESHA Research\n * Dual licensed under the MIT and GPL licenses:\n *   http://www.opensource.org/licenses/mit-license.php\n *   http://www.gnu.org/licenses/gpl.html\n *\n * Makes it easy to watch for storage events by enhancing the events and\n * allowing binding to particular keys and/or namespaces.\n *\n * // listen to particular key storage events (yes, this is namespace sensitive)\n * store.on('foo', function listenToFoo(e){ console.log('foo was changed:', e); });\n * store.off('foo', listenToFoo);\n *\n * // listen to all storage events\n * store.on(function storageEvent(e){ console.log('web storage:', e); });\n * store.off(storageEvent);\n * \n * Status: ALPHA - useful, if you don't mind incomplete browser support for events\n */\n;(function(window, document, _) {\n    _.fn('on', function(key, fn) {\n        if (!fn) { fn = key; key = ''; }// shift args when needed\n        var s = this,\n            bound,\n            id = _.id(this._area);\n        if (window.addEventListener) {\n            window.addEventListener(\"storage\", bound = function(e) {\n                var k = s._out(e.key);\n                if (k && (!key || k === key)) {// must match key if listener has one\n                    var eid = _.id(e.storageArea);\n                    if (!eid || id === eid) {// must match area, if event has a known one\n                        return fn.call(s, _.event(k, s, e));\n                    }\n                }\n            }, false);\n        } else {\n            document.attachEvent(\"onstorage\", bound = function() {\n                return fn.call(s, window.event);\n            });\n        }\n        fn['_'+key+'listener'] = bound;\n        return s;\n    });\n    _.fn('off', function(key, fn) {\n        if (!fn) { fn = key; key = ''; }// shift args when needed\n        var bound = fn['_'+key+'listener'];\n        if (window.removeEventListener) {\n            window.removeEventListener(\"storage\", bound);\n        } else {\n            document.detachEvent(\"onstorage\", bound);\n        }\n        return this;\n    });\n    _.event = function(k, s, e) {\n        var event = {\n            key: k,\n            namespace: s.namespace(),\n            newValue: _.parse(e.newValue),\n            oldValue: _.parse(e.oldValue),\n            url: e.url || e.uri,\n            storageArea: e.storageArea,\n            source: e.source,\n            timeStamp: e.timeStamp,\n            originalEvent: e\n        };\n        if (_.cache) {\n            var min = _.expires(e.newValue || e.oldValue);\n            if (min) {\n                event.expires = _.when(min);\n            }\n        }\n        return event;\n    };\n    _.id = function(area) {\n        for (var id in _.areas) {\n            if (area === _.areas[id]) {\n                return id;\n            }\n        }\n    };\n})(window, document, window.store._);","/home/travis/build/npmtest/node-npmtest-store2/node_modules/store2/src/store.cache.js":"/**\n * Copyright (c) 2013 ESHA Research\n * Dual licensed under the MIT and GPL licenses:\n *   http://www.opensource.org/licenses/mit-license.php\n *   http://www.gnu.org/licenses/gpl.html\n *\n * Allows use of the 'overwrite' param on set calls to give an enforced expiration date\n * without breaking existing 'overwrite' functionality.\n *\n * Status: BETA - useful, needs testing\n */\n;(function(_) {\n    var prefix = 'exp@',\n        suffix = ';',\n        parse = _.parse,\n        _get = _.get,\n        _set = _.set;\n    _.parse = function(s) {\n        if (s && s.indexOf(prefix) === 0) {\n            s = s.substring(s.indexOf(suffix)+1);\n        }\n        return parse(s);\n    };\n    _.expires = function(s) {\n        if (s && s.indexOf(prefix) === 0) {\n            return parseInt(s.substring(prefix.length, s.indexOf(suffix)), 10);\n        }\n        return false;\n    };\n    _.when = function(min) {// if min, return min->date, else date->min\n        var now = Math.floor((new Date().getTime())/1000);\n        return min ? new Date((now+min)*1000) : now;\n    };\n    _.cache = function(area, key) {\n        var s = _get(area, key),\n            min = _.expires(s);\n        if (min && _.when() >= min) {\n            return area.removeItem(key);\n        }\n        return s;\n    };\n    _.get = function(area, key) {\n        var s = _.cache(area, key);\n        return s === undefined ? null : s;\n    };\n    _.set = function(area, key, string, min) {\n        try {\n            if (min) {\n                string = prefix + (_.when()+min) + suffix + string;\n            }\n            _set(area, key, string);\n        } catch (e) {\n            if (e.name === 'QUOTA_EXCEEDED_ERR' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n                var changed = false;\n                for (var i=0,m=area.length; i<m; i++) {\n                    if (_.cache(area, key) === undefined) {\n                        changed = true;\n                    }\n                }\n                if (changed) {\n                    return _.set.apply(this, arguments);\n                }\n            }\n            throw e;\n        }\n    };\n})(window.store._, undefined);\n","/home/travis/build/npmtest/node-npmtest-store2/node_modules/store2/src/store.deep.js":"/**\n * Copyright (c) 2017 ESHA Research\n * Dual licensed under the MIT and GPL licenses:\n *   http://www.opensource.org/licenses/mit-license.php\n *   http://www.gnu.org/licenses/gpl.html\n *\n * Allows retrieval of values from within a stored object.\n *\n *   store.set('foo', { is: { not: { quite: false }}});\n *   console.log(store.get('foo.is.not.quite'));// logs false\n *\n * Status: ALPHA - currently only supports get, inefficient, uses eval\n */\n;(function(_) {\n\n    // save original core accessor\n    var _get = _.get;\n    // replace with enhanced version\n    _.get = function(area, key, kid) {\n        var s = _get(area, key);\n        if (s == null) {\n            var parts = _.split(key);\n            if (parts) {\n                key = parts[0];\n                kid = kid ? parts[1] + '.' + kid : parts[1];\n                return _.get(area, parts[0], kid);\n            }\n        } else if (kid) {\n            var val = _.parse(s);\n            /*jshint evil:true */\n            val = eval(\"val.\"+kid);\n            s = _.stringify(val);\n        }\n        return s;\n    };\n\n    // expose internals on the underscore to allow extensibility\n    _.split = function(key) {\n        var dot = key.lastIndexOf('.');\n        if (dot > 0) {\n            var kid = key.substring(dot+1, key.length);\n            key = key.substring(0, dot);\n            return [key, kid];\n        }\n    };\n\n})(window.store._);\n","/home/travis/build/npmtest/node-npmtest-store2/node_modules/store2/src/store.dom.js":"/**\n * Copyright (c) 2017 ESHA Research\n * Dual licensed under the MIT and GPL licenses:\n *   http://www.opensource.org/licenses/mit-license.php\n *   http://www.gnu.org/licenses/gpl.html\n *\n * Declarative, persistent DOM content.\n *\n *   <input store name=\"whatever\">\n *   <div store=\"somekey\" store-area=\"session\" contenteditable>Some content</div>\n *\n * Status: BETA - uses store, doesn't extend it, deserves standalone project\n */\n;(function(document, store, _, Array) {\n\n    // expose internal functions on store._.dom for extensibility\n    var DOM = _.dom = function() {\n        var nodes = document.querySelectorAll(DOM.selector),\n            array = Array.prototype.slice.call(nodes);\n        for (var i=0; i<array.length; i++) {\n            DOM.node(array[i], i);\n        }\n        return array;\n    };\n    DOM.selector = '[store],[store-area]';\n    DOM.event = 'input';// beforeunload is tempting\n    DOM.node = function(node, i) {\n        var key = DOM.key(node, i),\n            area = DOM.area(node),\n            value = area(key);\n        if (value == null) {\n            value = DOM.get(node);\n        } else {\n            DOM.set(node, value);\n        }\n        if (!node.storeListener) {\n            node.addEventListener(DOM.event, function() {\n                area(key, DOM.get(node));\n            });\n            node.storeListener = true;\n        }\n    };\n    DOM.area = function(node) {\n        return store[node.getAttribute('store-area') || 'local'];\n    };\n    // prefer store attribute value, then name attribute, use nodeName+index as last resort\n    DOM.key = function(node, i) {\n        return node.getAttribute('store') ||\n            node.getAttribute('name') || \n            ('dom.'+node.nodeName.toLowerCase() + (i||''));\n    };\n    // both get and set should prefer value property to innerHTML\n    DOM.get = function(node) {\n        return node.value || node.innerHTML;\n    };\n    DOM.set = function(node, value) {\n        if ('value' in node) {\n            node.value = value;\n        } else {\n            node.innerHTML = typeof value === \"string\" ? value : _.stringify(value);\n        }\n    };\n\n    // initialize\n    document.addEventListener('DOMContentLoaded', DOM);\n\n})(document, window.store, window.store._, Array);\n","/home/travis/build/npmtest/node-npmtest-store2/node_modules/store2/src/store.dot.js":"/**\n * Copyright (c) 2017 ESHA Research\n * Dual licensed under the MIT and GPL licenses:\n *   http://www.opensource.org/licenses/mit-license.php\n *   http://www.gnu.org/licenses/gpl.html\n *\n * Adds getters and setters for existing keys (and newly set() ones) to enable dot access to stored properties.\n *\n *   store.dot('foo','bar');// makes store aware of keys (could also do store.set('foo',''))\n *   store.foo = { is: true };// == store.set('foo', { is: true });\n *   console.log(store.foo.is);// logs 'true'\n * \n * This will not create accessors that conflict with existing properties of the store object.\n *\n * Status: ALPHA - good, but ```store.foo.is=false``` won't persist while looking like it would \n */\n;(function(_, Object, Array) {\n\n    // expose internals on the underscore to allow extensibility\n    _.dot = function(key) {\n        var keys = !key ? this.keys() :\n            Array.isArray(key) ? key :\n            Array.prototype.slice.call(arguments),\n            target = this;\n        keys.forEach(function(key) {\n            _.dot.define(target, key);\n        });\n        return this;\n    };\n    _.dot.define = function(target, key) {\n        if (!(key in target)) {\n            Object.defineProperty(target, key, {\n                enumerable: true,\n                get: function(){ return this.get(key); },\n                set: function(value){ this.set(key, value); }\n            });\n        }\n    };\n\n    // add function(s) to the store interface\n    _.fn('dot', _.dot);\n\n})(window.store._, window.Object, window.Array);\n","/home/travis/build/npmtest/node-npmtest-store2/node_modules/store2/src/store.measure.js":"/**\n * Copyright (c) 2013 ESHA Research\n * Dual licensed under the MIT and GPL licenses:\n *   http://www.opensource.org/licenses/mit-license.php\n *   http://www.gnu.org/licenses/gpl.html\n *\n * store.remainingSpace();// returns remainingSpace value (if browser supports it)\n * store.charsUsed();// returns length of all data when stringified\n * store.charsLeft([true]);// tests how many more chars we can fit (crash threat!)\n * store.charsTotal([true]);// charsUsed + charsLeft, duh.\n *\n * TODO: byte/string conversions\n *\n * Status: ALPHA - changing API *and* crash threats :)\n */\n;(function(store, _) {\n\n    function put(area, s) {\n        try {\n            area.setItem(\"__test__\", s);\n            return true;\n        } catch (e) {}\n    }\n\n    _.fn('remainingSpace', function() {\n        return this._area.remainingSpace;\n    });\n    _.fn('charsUsed', function() {\n        return _.stringify(this.getAll()).length - 2;\n    });\n    _.fn('charsLeft', function(test) {\n        if (this.isFake()){ return; }\n        if (arguments.length === 0) {\n            test = window.confirm('Calling store.charsLeft() may crash some browsers!');\n        }\n        if (test) {\n            var s = 's ', add = s;\n            // grow add for speed\n            while (put(store._area, s)) {\n                s += add;\n                if (add.length < 50000) {\n                    add = s;\n                }\n            }\n            // shrink add for accuracy\n            while (add.length > 2) {\n                s = s.substring(0, s.length - (add.length/2));\n                while (put(store._area, s)) {\n                    s += add;\n                }\n                add = add.substring(add.length/2);\n            }\n            _.remove(store._area, \"__test__\");\n            return s.length + 8;\n        }\n    });\n    _.fn('charsTotal', function(test) {\n        return store.charsUsed() + store.charsLeft(test);\n    });\n\n})(window.store, window.store._);","/home/travis/build/npmtest/node-npmtest-store2/node_modules/store2/src/store.old.js":"/**\n * Copyright (c) 2013 ESHA Research\n * Dual licensed under the MIT and GPL licenses:\n *   http://www.opensource.org/licenses/mit-license.php\n *   http://www.gnu.org/licenses/gpl.html\n *\n * If fake (non-persistent) storage for users stuck in the dark ages \n * does not satisfy you, this will replace it with the a reasonable imitator for their\n * pathetic, incompetent browser.  Note that the session replacement here is potentially\n * insecure as it uses window.name without any fancy protections.\n *\n * Status: BETA - unsupported, useful, needs testing & refining\n */\n;(function(window, document, store, _) {\n\n    function addUpdateFn(area, name, update) {\n        var old = area[name];\n        area[name] = function() {\n            var ret = old.apply(this, arguments);\n            update.apply(this, arguments);\n            return ret;\n        };\n    }\n    function create(name, items, update) {\n        var length = 0;\n        for (var k in items) {\n            if (items.hasOwnProperty(k)) {\n                length++;\n            }\n        }\n        var area = _.inherit(_.storageAPI, { items:items, length:length, name:name });\n        if (update) {\n            addUpdateFn(area, 'setItem', update);\n            addUpdateFn(area, 'removeItem', update);\n        }\n        return area;\n    }\n\n    if (store.isFake()) {\n        var area;\n\n        if (document.documentElement.addBehavior) {// IE userData\n            var el = document.createElement('div'),\n                sn = 'localStorage',\n                body = document.body,\n                wrap = function wrap(fn) {\n                    return function() {\n                        body.appendChild(el);\n                        el.addBehavior('#default#userData');\n                        el.load(sn);\n                        var ret = fn.apply(store._area, arguments);\n                        el.save(sn);\n                        body.removeChild(el);\n                        return ret;\n                    };\n                },\n                has = function has(key){\n                    return el.getAttribute(key) !== null;\n                },\n                UserDataStorage = function UserDataStorage(){};\n\n            UserDataStorage.prototype = {\n                length: (wrap(function(){\n                    return el.XMLDocument.documentElement.attributes.length;\n                }))(),\n                has: wrap(has),\n                key: wrap(function(i) {\n                    return el.XMLDocument.documentElement.attributes[i];\n                }),\n                setItem: wrap(function(k, v) {\n                    if (!has(k)) {\n                        this.length++;\n                    }\n                    el.setAttribute(k, v);\n                }),\n                removeItem: wrap(function(k) {\n                    if (has(k)) {\n                        el.removeAttribute(k);\n                        this.length--;\n                    }\n                }),\n                getItem: wrap(function(k){ return el.getAttribute(k); }),\n                clear: wrap(function() {\n                    var all = el.XMLDocument.documentElement.attributes;\n                    for (var i=0, a; !!(a = all[i]); i++) {\n                        el.removeAttribute(a.name);\n                    }\n                    this.length = 0;\n                })\n            };\n            area = new UserDataStorage();\n\n        } else if ('globalStorage' in window && window.globalStorage) {// FF globalStorage\n            area = create('global', window.globalStorage[window.location.hostname]);\n\n        } else {// cookie\n            var date = new Date(),\n                key = 'store.local',\n                items = {},\n                cookies = document.cookie.split(';');\n            date.setTime(date.getTime()+(5*365*24*60*60*1000));//5 years out\n            date = date.toGMTString();\n            for (var i=0,m=cookies.length; i<m; i++) {\n                var c = cookies[i];\n                while (c.charAt(0) === ' ') {\n                    c = c.substring(1, c.length);\n                }\n                if (c.indexOf(key) === 0) {\n                    items = JSON.parse(c.substring(key.length+1));\n                }\n            }\n            area = create('cookie', items, function() {\n                document.cookie = key+\"=\"+JSON.stringify(this.items)+\"; expires=\"+date+\"; path=/\";\n            });\n        }\n\n        // replace local's fake storage\n        store._area = _.areas.local = area;\n    }\n\n    if (store.session.isFake()) {\n        var sItems = window.name ? JSON.parse(window.name)[document.domain]||{} : {};\n        store.session._area = _.areas.session =\n            create('windowName', sItems, function() {\n                var o = {};\n                o[document.domain] = this.items;\n                window.name = JSON.stringify(o);\n            });\n    }\n\n})(window, document, window.store, window.store._);\n","/home/travis/build/npmtest/node-npmtest-store2/node_modules/store2/src/store.on.js":"/**\n * Copyright (c) 2013 ESHA Research\n * Dual licensed under the MIT and GPL licenses:\n *   http://www.opensource.org/licenses/mit-license.php\n *   http://www.gnu.org/licenses/gpl.html\n *\n * Makes it easy to watch for storage events by enhancing the events and\n * allowing binding to particular keys and/or namespaces.\n *\n * // listen to particular key storage events (yes, this is namespace sensitive)\n * store.on('foo', function listenToFoo(e){ console.log('foo was changed:', e); });\n * store.off('foo', listenToFoo);\n *\n * // listen to all storage events (also namespace sensitive)\n * store.on(function storageEvent(e){ console.log('web storage:', e); });\n * store.off(storageEvent);\n * \n * Status: BETA - useful, if you aren't using IE8 or worse\n */\n;(function(window, _) {\n\n    _.on = function(key, fn) {\n        if (!fn) { fn = key; key = ''; }// no key === all keys\n        var listener = function(e) {\n            var k = this._out(e.key);// undefined if key is not in the namespace\n            if ((k && (!key || k === key)) && // match key if listener has one\n                (!e.storageArea || e.storageArea === this._area)) {// match area, if available\n                return fn.call(this, _.event.call(this, k, e));\n            }\n        };\n        window.addEventListener(\"storage\", fn[key+'-listener']=listener, false);\n        return this;\n    };\n\n    _.off = function(key, fn) {\n        if (!fn) { fn = key; key = ''; }// no key === all keys\n        window.removeEventListener(\"storage\", fn[key+'-listener']);\n        return this;\n    };\n\n    _.once = function(key, fn) {\n        if (!fn) { fn = key; key = ''; }\n        var s = this, listener;\n        return s.on(key, listener = function() {\n            s.off(key, listener);\n            return fn.apply(this, arguments);\n        });\n    };\n\n    _.event = function(k, e) {\n        var event = {\n            key: k,\n            namespace: this.namespace(),\n            newValue: _.parse(e.newValue),\n            oldValue: _.parse(e.oldValue),\n            url: e.url || e.uri,\n            storageArea: e.storageArea,\n            source: e.source,\n            timeStamp: e.timeStamp,\n            originalEvent: e\n        };\n        if (_.cache) {\n            var min = _.expires(e.newValue || e.oldValue);\n            if (min) {\n                event.expires = _.when(min);\n            }\n        }\n        return event;\n    };\n\n    // store2 policy is to not throw errors on old browsers\n    var old = !window.addEventListener ? function(){} : null;\n    _.fn('on', old || _.on);\n    _.fn('off', old || _.off);\n    _.fn('once', old || _.once);\n\n})(window, window.store._);\n","/home/travis/build/npmtest/node-npmtest-store2/node_modules/store2/src/store.onlyreal.js":"/**\n * Copyright (c) 2015 ESHA Research\n * Dual licensed under the MIT and GPL licenses:\n *   http://www.opensource.org/licenses/mit-license.php\n *   http://www.gnu.org/licenses/gpl.html\n *\n * Store nothing when storage is not supported.\n *\n * Status: ALPHA - due to being of doubtful propriety\n */\n;(function(_) {\n\n    var _set = _.set;\n    _.set = function(area) {\n        return area.name === 'fake' ? undefined : _set.apply(this, arguments);\n    };\n\n})(window.store._);\n","/home/travis/build/npmtest/node-npmtest-store2/node_modules/store2/src/store.overflow.js":"/**\n * Copyright (c) 2013 ESHA Research\n * Dual licensed under the MIT and GPL licenses:\n *   http://www.opensource.org/licenses/mit-license.php\n *   http://www.gnu.org/licenses/gpl.html\n *\n * When quota is reached on a storage area, this shifts incoming values to \n * fake storage, so they last only as long as the page does. This is useful\n * because it is more burdensome for localStorage to recover from quota errors\n * than incomplete caches. In other words, it is wiser to rely on store.js\n * never complaining than never missing data. You should already be checking\n * the integrity of cached data on every page load. Also note that quota errors\n * are thrown by Safari for *every* setItem when user is in private browsing mode.\n * http://spin.atomicobject.com/2013/01/23/ios-private-browsing-localstorage/\n *\n * Status: BETA\n */\n;(function(store, _) {\n    var _set = _.set,\n        _get = _.get,\n        _remove = _.remove,\n        _key = _.key,\n        _length = _.length,\n        _clear = _.clear;\n\n    _.overflow = function(area, create) {\n        var name = area === _.areas.local ? '+local+' :\n                   area === _.areas.session ? '+session+' : false;\n        if (name) {\n            var overflow = _.areas[name];\n            if (create && !overflow) {\n                overflow = store.area(name)._area;// area() copies to _.areas\n            } else if (create === false) {\n                delete _.areas[name];\n                delete store[name];\n            }\n            return overflow;\n        }\n    };\n    _.set = function(area, key, string) {\n        try {\n            _set.apply(this, arguments);\n        } catch (e) {\n            if (e.name === 'QUOTA_EXCEEDED_ERR' ||\n                e.name === 'NS_ERROR_DOM_QUOTA_REACHED' ||\n                e.toString().indexOf(\"QUOTA_EXCEEDED_ERR\") !== -1 ||\n                e.toString().indexOf(\"QuotaExceededError\") !== -1) {\n                // the e.toString is needed for IE9 / IE10, cos name is empty there\n                return _.set(_.overflow(area, true), key, string);\n            }\n            throw e;\n        }\n    };\n    _.get = function(area, key) {\n        var overflow = _.overflow(area);\n        return (overflow && _get.call(this, overflow, key)) ||\n            _get.apply(this, arguments);\n    };\n    _.remove = function(area, key) {\n        var overflow = _.overflow(area);\n        if (overflow){ _remove.call(this, overflow, key); }\n        _remove.apply(this, arguments);\n    };\n    _.key = function(area, i) {\n        var overflow = _.overflow(area);\n        if (overflow) {\n            var l = _length.call(this, area);\n            if (i >= l) {\n                i = i - l;// make i overflow-relative\n                for (var j=0, m=_length.call(this, overflow); j<m; j++) {\n                    if (j === i) {// j is overflow index\n                        return _key.call(this, overflow, j);\n                    }\n                }\n            }\n        }\n        return _key.apply(this, arguments);\n    };\n    _.length = function(area) {\n        var length = _length(area),\n            overflow = _.overflow(area);\n        return overflow ? length + _length(overflow) : length;\n    };\n    _.clear = function(area) {\n        _.overflow(area, false);\n        _clear.apply(this, arguments);\n    };\n\n})(window.store, window.store._);\n","/home/travis/build/npmtest/node-npmtest-store2/node_modules/store2/src/store.quota.js":"/**\n * Copyright (c) 2013 ESHA Research\n * Dual licensed under the MIT and GPL licenses:\n *   http://www.opensource.org/licenses/mit-license.php\n *   http://www.gnu.org/licenses/gpl.html\n *\n * Bind handlers to quota errors:\n *   store.quota(function(e, area, key, str) {\n *      console.log(e, area, key, str);\n *   });\n * If a handler returns true other handlers are not called and\n * the error is suppressed.\n *\n * Think quota errors will never happen to you? Think again:\n * http://spin.atomicobject.com/2013/01/23/ios-private-browsing-localstorage/\n * (this affects sessionStorage too)\n *\n * Status: ALPHA - API could use unbind feature\n */\n;(function(store, _) {\n\n    store.quota = function(fn) {\n        store.quota.fns.push(fn);\n    };\n    store.quota.fns = [];\n\n    var _set = _.set;\n    _.set = function(area, key, str) {\n        try {\n            _set.apply(this, arguments);\n        } catch (e) {\n            if (e.name === 'QUOTA_EXCEEDED_ERR' ||\n                e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n                var fns = store.quota.fns;\n                for (var i=0,m=fns.length; i<m; i++) {\n                    if (true === fns[i].call(this, e, area, key, str)) {\n                        return;\n                    }\n                }\n            }\n            throw e;\n        }\n    };\n\n})(window.store, window.store._);"}